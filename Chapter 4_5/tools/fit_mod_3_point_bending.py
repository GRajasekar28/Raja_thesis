# -*- coding: utf-8 -*-
"""
Created on Thu Jul 27 11:33:43 2023

@author: gopalsamy
"""



#############################################################################################
## fit GKV parameters from experimnts [Tabakovic (cited in Benajmin)]for 3 point bending (known analytical solution for  GKV) ##
#############################################################################################

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize, curve_fit, least_squares
import pandas as pd

import mpmath as mpm

import os
import sys

##geometry of 3 point bending
thickness = 20e-3; b= thickness;  ## thickness in z-direction 
L = 260/1000 
h = 40/1000

## experimental results (stored as a list for differnt displacement rates)

## [u_dot = 1 mm/s, u_dot = .1 mm/s, u_dot = .01 mm/s]
"""
ex = [np.array([[0, 0],
                 [0.29126213592232997e-3, 15.642023346303503],
                 [0.5825242718446599e-3, 23.112840466926073],
                 [1.0194174757281549e-3, 31.984435797665373],
                 [1.5048543689320382e-3, 36.420233463035025]]),
      
      np.array([[0, 0],
                 [0.3883495145631066e-3, 3.735408560311285],
                 [1.0194174757281549e-3, 6.536964980544745],
                 [1.6504854368932036e-3, 9.338521400778212],
                 [2.4271844660194177e-3, 11.43968871595331],
                 [3.3495145631067955e-3, 13.307392996108952]]),
      
      np.array([[0,0],
                 [0.4854368932038833e-3, 1.1673151750972721],
                 [0.9708737864077666e-3, 2.101167315175097],
                 [1.7961165048543686e-3, 3.268482490272376],
                 [2.2330097087378644e-3, 4.435797665369648]])]"""


ex = [np.array([   [0, 0],
                   [0.29583599189946463e-3, 15.229783338419288],
                   [ 0.6239631592088108e-3, 24.514661414264715],
                   [ 0.9500929342247626e-3, 30.455904790967352],
                   [ 1.2753349793325386e-3, 34.91108830138431],
                   [ 1.5999112270091826e-3, 38.25172691208701],
                   [ 1.9602186034898885e-3, 41.40627514078842]]),
      
      np.array([[0, 0],
                 [0.32457624767664495e-3, 3.34097150941826],
                [0.5763586428829033e-3, 4.824701084694993],
               [ 0.8637612006547006e-3, 5.936582794684718],
               [ 1.0794795683413323e-3, 7.049130302105588],
               [ 1.3669930923516525e-3, 8.34676949538104],
               [ 1.6543956501234498e-3, 9.45865120537077],
               [ 2.15696174438927e-3, 10.754293006352817],
               [ 2.444142369684024e-3, 11.494659749771138],
               [ 2.6596388048936124e-3, 12.235692290620591],
               [ 2.946708463949843e-3, 12.790301550753185],
               [ 3.4491635919771406e-3, 13.900185868449533],
               [ 3.7363442172718946e-3, 14.640552611867847],
               [ 3.9873498488085e-3, 14.8239798041446]]),
      
      np.array([[0,0],
                 [0.2513385302521707e-3, 0.7410325408494529],
                   [ 0.6102033456320912e-3, 1.4807334868366269],
                   [ 0.9332260659694294e-3, 2.207673315393777],
                   [ 1.1843426637445562e-3, 2.589952007101843],
                   [ 1.471301356562266e-3, 2.9588037839487455],
                   [ 1.830166171942187e-3, 3.6985047299359195],
                   [ 2.224651149887647e-3, 4.066357810636113],
                   [ 2.439814686381668e-3, 4.250117901628435],
                   [ 2.7266624129608568e-3, 4.433212195189618],
                   [ 3.013621105778567e-3, 4.802063972036521],
                   [ 3.4440591450051325e-3, 5.35534163730685],
                   [ 3.8742752517546544e-3, 5.5371043360057755],
                   [ 4.161122978333843e-3, 5.7201986295669585]])]






def beam_analytical_solution_KV(E,tau,u_appl,speed):
    ## analytical solution by inverse Laplace transform of dynamic modulous of GKV model
    ## inverse Laplace transform performed numerically using mpmath library
    g = (4*b*h**3/(L**3))
    
    
    def dynam_mod_gkv(s):
    ## privdes dynamic modulous of GKV model ;; s =i*w ;; w the frequency
        E_s = 1/E[0]
        for i in range(len(tau)):
            E_s += 1/(E[i+1]*(1+tau[i]*s))
        return 1/E_s
    
    load = lambda s: g*dynam_mod_gkv(s)*speed/s**2   ## load in frequency domain
    time_loc = u_appl/speed
    
    if type(u_appl) ==np.ndarray:
        if time_loc[0] ==0.:
            time_loc[0] = 1e-12
        F = np.zeros_like(u_appl)
        for i in range(len(F)):
            F[i] = mpm.invertlaplace(load, time_loc[i])
        return F



    

def ob_fun(y, n_kv,  speed):
    E_kv = y[:n_kv]
    tau_kv = y[n_kv:]
    obj = []
    for i,j in enumerate(speed):
            obj.append(beam_analytical_solution_KV(E_kv, tau_kv, ex[i][:,0], j) - ex[i][:,1])
            
    return np.concatenate(obj, axis =0)



speed = [1e-3, .1e-3, .01e-3]


n_kv = 3
## initial guess  
E_kv =[1e3]*n_kv
tau_kv = [1e-2]*(n_kv-1)
## unknowns in an array
x0 = np.array(E_kv+tau_kv)



## define bounds for the paramters  (E_kv and tau_kv)

lb=  [1e3]*n_kv  + [1e-3]*(n_kv-1)
ub = [1e11]*n_kv + [100]*(n_kv-1)


ftol =1e-6
xtol = 1e-6
gtol = 1e-6
#ind = [0,1]    ## indices where the residual is minimized with additionla effort
#penalty = 10          ## weight/penalty factor for minimization of residaul at ind

popt = least_squares(ob_fun, x0, args = (n_kv,speed), bounds=((lb,ub)), ftol=ftol,
                     xtol =xtol, gtol = gtol)


y= popt.x

#x[0] = y_data[-1]


E_kv = y[:n_kv]
tau_kv = y[n_kv:]
"""
n_kv = 2
E_kv = [2674e6, 97e6]
tau_kv = [29]
"""

plt.figure(4)

for i,j in enumerate(speed):
    plt.plot(ex[i][:,0], beam_analytical_solution_KV(E_kv, tau_kv, ex[i][:,0], j),'--')
    
for i,j in enumerate(speed):
    plt.plot(ex[i][:,0],ex[i][:,1])
    
plt.legend(['analytic_1', 'analytic_2','analytic_3', 'exp_1','exp_2','exp_3'])


## 3 point ebnding date for different imposed displacement rates from Tabakovic
ex_fracture = [
        np.array([[0,0],
        [2.95835992e-04, 1.52297833e+01],
        [6.23963159e-04, 2.45146614e+01],
        [9.50092934e-04, 3.04559048e+01],
        [1.27533498e-03, 3.49110883e+01],
        [1.59991123e-03, 3.82517269e+01],
        [1.96021860e-03, 4.14062751e+01],
        [2.28412905e-03, 4.36323689e+01],
        [2.64365967e-03, 4.54866147e+01],
        [3.07476350e-03, 4.71544373e+01],
        [3.82811330e-03, 4.82619913e+01],
        [4.47293811e-03, 4.76987267e+01],
        [4.93810858e-03, 4.63940966e+01],
        [5.40305712e-03, 4.47179516e+01],
        [5.79676533e-03, 4.37855023e+01],
        [6.36857436e-03, 4.09938136e+01],
        [6.90454129e-03, 3.82024579e+01],
        [7.47612839e-03, 3.50392543e+01],
        [8.11917774e-03, 3.15038699e+01],
        [8.76222709e-03, 2.79684856e+01],
        [9.36943435e-03, 2.44334341e+01],
        [9.94135434e-03, 2.18275030e+01],
        [1.05848476e-02, 1.90351486e+01],
        [1.11926096e-02, 1.64288845e+01],
        [1.21938580e-02, 1.25186562e+01],
        [1.28376841e-02, 1.02835742e+01],
        [1.34816212e-02, 8.23424973e+00],
        [1.41258912e-02, 6.74219769e+00],
        [1.48063362e-02, 5.80708519e+00],
        [1.54865592e-02, 4.50045774e+00],
        [1.62745305e-02, 3.56434655e+00]]),
        
        np.array([[0,0],
        [3.24576248e-04, 3.34097151e+00],
        [5.76358643e-04, 4.82470108e+00],
        [8.63761201e-04, 5.93658279e+00],
        [1.07947957e-03, 7.04913030e+00],
        [1.36699309e-03, 8.34676950e+00],
        [1.65439565e-03, 9.45865121e+00],
        [2.15696174e-03, 1.07542930e+01],
        [2.44414237e-03, 1.14946597e+01],
        [2.65963880e-03, 1.22356923e+01],
        [2.94670846e-03, 1.27903016e+01],
        [3.44916359e-03, 1.39001859e+01],
        [3.73634422e-03, 1.46405526e+01],
        [3.98734985e-03, 1.48239798e+01],
        [4.48958304e-03, 1.55623492e+01],
        [4.99159431e-03, 1.59292035e+01],
        [5.52955863e-03, 1.64814825e+01],
        [6.03123700e-03, 1.62910644e+01],
        [6.49729520e-03, 1.64724942e+01],
        [6.89144728e-03, 1.62830749e+01],
        [7.24964630e-03, 1.59082309e+01],
        [7.71526063e-03, 1.53466308e+01],
        [8.14503287e-03, 1.47853636e+01],
        [8.61064721e-03, 1.42237634e+01],
        [9.14794574e-03, 1.36614975e+01],
        [9.61333814e-03, 1.27283824e+01],
        [1.00788415e-02, 1.19810248e+01],
        [1.05442339e-02, 1.10479097e+01],
        [1.09735623e-02, 9.74361251e+00],
        [1.14032236e-02, 8.99658779e+00],
        [1.18328848e-02, 8.24956307e+00],
        [1.21908619e-02, 7.50320415e+00],
        [1.26563653e-02, 6.75584653e+00],
        [1.30142314e-02, 5.82373013e+00],
        [1.36228812e-02, 4.70352595e+00],
        [1.41600688e-02, 3.95550254e+00],
        [1.46614143e-02, 3.20781202e+00],
        [1.51988238e-02, 2.83130358e+00],
        [1.56644381e-02, 2.26970344e+00],
        [1.62735318e-02, 1.89252920e+00],
        [1.70617250e-02, 1.32793298e+00],
        [1.78499182e-02, 7.63336755e-01],
        [1.83874386e-02, 5.72585791e-01]]),
        
        np.array([[0,0],
        [2.51338530e-04, 7.41032541e-01],
        [6.10203346e-04, 1.48073349e+00],
        [9.33226066e-04, 2.22076733e+00],
        [1.18434266e-03, 2.58995201e+00],
        [1.47130136e-03, 2.95880378e+00],
        [1.83016617e-03, 3.69850473e+00],
        [2.22465115e-03, 4.06635781e+00],
        [2.43981469e-03, 4.25011790e+00],
        [2.72666241e-03, 4.43321220e+00],
        [3.01362111e-03, 4.80206397e+00],
        [3.44405915e-03, 5.35534164e+00],
        [3.87427525e-03, 5.53710434e+00],
        [4.16112298e-03, 5.72019863e+00],
        [4.44797070e-03, 5.90329292e+00],
        [4.77054956e-03, 5.90029683e+00],
        [5.09312842e-03, 5.89730075e+00],
        [5.45166033e-03, 6.07972924e+00],
        [5.81008128e-03, 6.07640026e+00],
        [6.20434433e-03, 6.07273837e+00],
        [6.59838544e-03, 5.69756152e+00],
        [6.88501124e-03, 5.50914084e+00],
        [7.24321025e-03, 5.13429689e+00],
        [7.56556718e-03, 4.75978584e+00],
        [7.99556135e-03, 4.57003357e+00],
        [8.35376037e-03, 4.19518961e+00],
        [8.89094793e-03, 3.44716620e+00],
        [9.21341582e-03, 3.25841263e+00],
        [9.75071435e-03, 2.69614670e+00],
        [1.02523927e-02, 2.50572863e+00],
        [1.07537382e-02, 1.75803812e+00],
        [1.13628319e-02, 1.38086387e+00],
        [1.19719255e-02, 1.00368963e+00],
        [1.24736039e-02, 8.13271562e-01],
        [1.27603407e-02, 8.10608372e-01]])]


## low tmperature cracking (ltc) data
ex_ltc = np.array([ [0,0]
                    [0.004170440672626313, 7.761194029850742],
                    [0.013519473870751766, 30.447761194029823],
                    [0.021848540936478547, 47.76119402985073],
                    [0.029126137124404358, 64.47761194029849],
                    [0.03640767140550548, 80.5970149253731],
                    [0.04369708187295711, 95.52238805970146],
                    [0.05310518646871183, 109.25373134328355],
                    [0.06146575827984087, 121.79104477611936],
                    [0.0708856771551215, 133.73134328358205],
                    [0.08561808372386091, 140.29850746268653],
                    [0.09301776080022052, 138.50746268656712],
                    [0.10153585633836094, 127.16417910447757],
                    [0.1079707005867759, 111.64179104477608],
                    [0.11757570984129485, 95.52238805970146],
                    [0.12505808687433545, 81.19402985074625],
                    [0.13357618241247587, 69.85074626865668],
                    [0.14952939786555353, 51.343283582089526],
                    [0.16543141810735246, 40.59701492537312],
                    [0.18026227700547398, 32.23880597014923],
                    [0.1971842633796716, 26.86567164179104],
                    [0.21410231166069393, 22.089552238805965],
                    [0.22890166581341315, 18.507462686567152],
                    [0.25425904776907027, 14.328358208955194],
                    [0.2848895364864333, 10.746268656716381],
                    [0.31867443783719923, 8.955223880596975],
                    [0.3408498405072264, 7.164179104477597],
                    [0.36512818493285554, 6.567164179104452],
                    [0.38412948450360335, 5.970149253731307],
                    [0.39785373921947, 5.373134328358191]]
                )